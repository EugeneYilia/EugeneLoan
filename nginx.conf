user root;
worker_process  1;#工作进程的个数，取为默认值1即可

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid    logs/nginx.pid

events {
    worker_connections 1024;#单个进程的最大连接数
}

http{
    include mime.types;#文件扩展名与文件类型映射表
    default_type    application/octet-stream;
    types_hash_bucket_size  2048;

    #log_format main    '$remote_addr - $remote_user [$time_local] "$request"'
    #                   '$status $body_bytes_sent "$http_referer"'
    #                   '"$http_user_agent" "$http_x_forwarded_for"'

    access_log logs/access.log main;

    sendfile    on;
    #开启高效文件传输模式，sendfile指定nginx是否调用sendfile函数来输出文件，对于普通应用设为on，
    #如果用来进行下载等应用磁盘 IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，
    #降低系统的负载。注意：如果图片显示不正常把这个改成off。

    #tcp_nopush on;
    #keepalive_timeout  0;
    keepalive_timeout   65;#长连接超时时间，单位是秒

    gzip    on;#启动Gzip压缩

    upstream spring_gateway{
    #ip_hash;#此处不启用是为了看到不同的集群服务器
    #当不启用ip_hash可以看到访问按设定的权重随即转发到不同的集群服务器，
    #可能会出现的问题是如果在某服务器已经登录，当每次刷新后重新访问有可能被转发到另一集群服务器上，这导致在该新服务器上出现未登录的情况
    #当启用ip_hash可以解决登录session丢失的假象的问题，因同一IP来源经ip_hash算法后都会转发到相同的某个集群服务器上
    #出现的问题同一IP都会访问相同的集群服务器，对用户来说可能出现仅有一个服务器的假象，并且如果正好该集群服务器死机，请求则重新转发到了另一个服务器

    server  127.0.0.1:10000 weight=1;
    server  127.0.0.1:10001 weight=1;
    #server 127.0.0.1:10002 weight=2;
    #集群服务器列表，每个服务器配置weight是权重的意思，权重越大，分配的概率越大
    #假设虚拟机配置一个不存在的集群服务器(比如第三个)，出现的问题就是nginx同样会把请求按指定的权重随机转发到不存在的服务器上
    #并会尝试连接，直到连接达到keepalive_timeout设定时间，如果还没有连接上则按新一轮把请求重新转发，如果连上集群服务器则响应请求
    #如果都没有连接上，超时了则返回5xx错误
    }

    #当前的nginx的配置
    server {
        listen 80;#默认监听web的80端口
        servername localhost;#当前服务的域名

        #charset    koi8-r;
        charset utf-8;

        #access_log logs/host.access.log main;

        location / {
            proxy_set_header Host $host;#反向代理服务器把请求头的host改为跟来源处一样，如果不设置则跟proxy_pass指令值一样，会引起URL错误或丢失等问题，很关键
            proxy_set_header X-Forwarded-For $remote_addr;#如果存在多级反向代理需要设置该指令，这个值是经过代理之后的前一个代理 $remote_addr的值(一般指IP),如第三级代理保存第二级代理IP，关键

            proxy_pass http://spring_gateway;对本服务器请求localhost:80转发到名为spring_gateway的集群处理
            proxy_redirect  default;#指令的作用是对发送给客户端的URL进行修改，使用default参数，将根据location和proxy_pass参数的设置来决定
        }


        #静态页面资源处理，对/static开头的URL回映射到本服务器下特定的静态资源目录，例如
        #http://localhost:80/static/pages/page01.html会映射到本服务器的/home/eugeneliu/static/pages/page01.html
        #即root配置的路径加上URL中匹配部分起的直到结尾，即为服务器的真实路径
        location /static/ {#静态页面资源处理，如html，css，js等
            root    /home/eugeneliu;
            #root data;#相对路径，相对nginx安装目录下的data为根目录
            #root /.../.../..;#绝对路径
            index index.htm index.html;#指定默认页面，如果匹配路径没有指定页面名称，则会从index的配置中查找名称，再找不到则报错
        }

        #静态图片资源处理，对/static/images开头的URL会映射到本服务器下特定的静态资源目录，例如
        #http://localhost:80/images/news/newspic.jpg会映射到本服务器的/home/eugeneliu/static/news/newpic.jpg
        #即root配置的路径加上URL中匹配的部分起直到结尾，即为服务器的真实路径
        location /static/images/ {
            root /home/eugeneliu;
            index index.jpg index.gif index.png;#指定默认图片名称，如果匹配路径没有指定图片名称，则会从index的配置中查找名称，再找不到则报错

        }

        error_page 404 /static/404.html;#当请求结果为404的时候返回/404.html
        location = /static/404.html {
            root /home/eugeneliu;
            index 404.html 404.htm;
        }

        #重定向服务器错误页面到静态页面/50x.html
        error_page 500 502 503 504 /static/50x.html;
        location = /static/50x.html {
            root /home/eugeneliu;
            index 50x.html 50x.htm;
        }


    }
}





















